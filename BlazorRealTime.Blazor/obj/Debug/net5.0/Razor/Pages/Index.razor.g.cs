#pragma checksum "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a2289477d328f0df56466224ad60366fc95a4ddb"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorRealTime.Blazor.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\_Imports.razor"
using BlazorRealTime.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\_Imports.razor"
using BlazorRealTime.Blazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
using System.Net.Http.Headers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
using BlazorFluentUI;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<h1>Welcome to SignalR with Blazor</h1>\r\n");
            __builder.OpenElement(1, "div");
            __builder.AddAttribute(2, "class", "Form");
            __builder.OpenComponent<BlazorFluentUI.BFUTextField>(3);
            __builder.AddAttribute(4, "Label", "Number of monkeys");
            __builder.AddAttribute(5, "Value", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String>(
#nullable restore
#line 10 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                                         monkeys

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(6, "OnInput", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<System.String>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<System.String>(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => monkeys = __value, monkeys))));
            __builder.AddAttribute(7, "ValueExpression", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Linq.Expressions.Expression<System.Func<System.String>>>(() => monkeys));
            __builder.CloseComponent();
            __builder.AddMarkupContent(8, "\r\n    ");
            __builder.OpenComponent<BlazorFluentUI.BFUTextField>(9);
            __builder.AddAttribute(10, "Label", "Message");
            __builder.AddAttribute(11, "Value", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String>(
#nullable restore
#line 11 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                               messageInput

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(12, "OnInput", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<System.String>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<System.String>(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => messageInput = __value, messageInput))));
            __builder.AddAttribute(13, "ValueExpression", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Linq.Expressions.Expression<System.Func<System.String>>>(() => messageInput));
            __builder.CloseComponent();
            __builder.AddMarkupContent(14, "\r\n    ");
            __builder.OpenComponent<BlazorFluentUI.BFUToggle>(15);
            __builder.AddAttribute(16, "OnText", "True!");
            __builder.AddAttribute(17, "OffText", "False!");
            __builder.AddAttribute(18, "Label", "Run the algorithm in parallel(True) or sequential(False).");
            __builder.AddAttribute(19, "Checked", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean?>(
#nullable restore
#line 12 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                              parallelInput

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(20, "CheckedChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<System.Boolean>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<System.Boolean>(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => parallelInput = __value, parallelInput))));
            __builder.CloseComponent();
            __builder.AddMarkupContent(21, "\r\n    ");
            __builder.OpenComponent<BlazorFluentUI.BFUSlider>(22);
            __builder.AddAttribute(23, "Label", "Crossover");
            __builder.AddAttribute(24, "Min", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Double>(
#nullable restore
#line 15 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                    0

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(25, "Max", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Double>(
#nullable restore
#line 16 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                    100

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(26, "ShowValue", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 17 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                          true

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(27, "Value", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Double?>(
#nullable restore
#line 14 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                           controlledValue

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(28, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<System.Double>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<System.Double>(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => controlledValue = __value, controlledValue))));
            __builder.CloseComponent();
            __builder.AddMarkupContent(29, "\r\n\r\n    ");
            __builder.OpenComponent<BlazorFluentUI.BFUSlider>(30);
            __builder.AddAttribute(31, "Label", "Mutation");
            __builder.AddAttribute(32, "Min", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Double>(
#nullable restore
#line 21 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                    0

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(33, "Max", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Double>(
#nullable restore
#line 22 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                    100

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(34, "ShowValue", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Boolean>(
#nullable restore
#line 23 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                          true

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(35, "Value", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Double?>(
#nullable restore
#line 20 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                           controlledMutation

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(36, "ValueChanged", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<System.Double>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<System.Double>(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => controlledMutation = __value, controlledMutation))));
            __builder.CloseComponent();
            __builder.AddMarkupContent(37, "\r\n    ");
            __builder.OpenComponent<BlazorFluentUI.BFUTextField>(38);
            __builder.AddAttribute(39, "Label", "loop limit");
            __builder.AddAttribute(40, "Value", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String>(
#nullable restore
#line 24 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                                  limit

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(41, "OnInput", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<System.String>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<System.String>(this, Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => limit = __value, limit))));
            __builder.AddAttribute(42, "ValueExpression", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Linq.Expressions.Expression<System.Func<System.String>>>(() => limit));
            __builder.CloseComponent();
            __builder.AddMarkupContent(43, "\r\n    ");
            __builder.OpenElement(44, "div");
            __builder.AddAttribute(45, "class", "buttons");
            __builder.OpenElement(46, "button");
            __builder.AddAttribute(47, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 26 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                          Send

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(48, "type", "button");
            __builder.AddAttribute(49, "class", "btn btn-primary");
            __builder.AddContent(50, "Send");
            __builder.CloseElement();
            __builder.AddMarkupContent(51, "\r\n        ");
            __builder.OpenElement(52, "button");
            __builder.AddAttribute(53, "class", "btn btn-success");
            __builder.AddAttribute(54, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 27 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                                  async () => await ConnectToServer()

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(55, "disabled", 
#nullable restore
#line 27 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                                                                                  isConnected

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(56, "Connect");
            __builder.CloseElement();
            __builder.AddMarkupContent(57, "\r\n        ");
            __builder.OpenElement(58, "button");
            __builder.AddAttribute(59, "type", "button");
            __builder.AddAttribute(60, "class", "btn btn-info");
            __builder.AddAttribute(61, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 28 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                                             async () => messageInput = "To be or not to be, that is the question"

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(62, "Info");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(63, "\r\n    ");
            __builder.OpenElement(64, "h3");
            __builder.AddContent(65, "Connection Status: ");
            __builder.AddContent(66, 
#nullable restore
#line 30 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                            connectionStatus

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(67, "\r\n");
            __builder.AddMarkupContent(68, "<div class=\"explaination\"><p>\r\n        \"The infinite monkey theorem states that a monkey hitting keys at random on a typewriter keyboard for an infinite amount of time will almost surely type any given text,\r\n        such as the complete works of William Shakespeare\"\r\n    </p>\r\n    <h3> So I created a genetic algorithm to try this theorem out using C#!</h3>\r\n    <p> The number of monkeys will decide on how many randomly generated string genomes will be created on each iteration of the genetic algorithm,\r\n        the more the merrier.</p>\r\n    <p>The message is the string that you want the genetic algorithm to try and figure out through different generations of strings.</p>\r\n    <p>If you want to run the genetic algorithm in parallel you can (hopefully) see a big change in the utilization of the CPU of which the genetic algorithm is running on.\r\n        Which means the algorithm would execute much much faster.</p>\r\n    <p> The crossover probability will decide that a pair of parents will cross over their genomes while generating a pair of children. Otherwise the children are identical to their parents.\r\n        So the higher the probability the easier you make it for the algorithm to guess the message</p>\r\n    <p>The mutation slider will decide on the probability that a newly generated child will suffer one randomized mutation by changing one random string in that genome.</p>\r\n    <p> the loop limit will set a limit on the number of iterations allowed on the genetic algorithm, if the limit is reached the algorithm will stop even if it hasn\'t calculated the right string</p></div>\r\n\r\n\r\n");
            __builder.OpenElement(69, "ul");
            __builder.AddAttribute(70, "id", "messagesList");
#nullable restore
#line 51 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
     foreach (var item in notifications)
    {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(71, "li");
            __builder.AddContent(72, "Number of   Loops: ");
            __builder.AddContent(73, 
#nullable restore
#line 53 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                item.loop

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(74, ", Genome Score: ");
            __builder.AddContent(75, 
#nullable restore
#line 53 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                                          item.score

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(76, ", Genome string: ");
            __builder.AddContent(77, 
#nullable restore
#line 53 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                                                                      item.genome

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
#nullable restore
#line 54 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
        if (item.score == 0)
        {
            sw.Stop();
            var ms = sw.ElapsedMilliseconds;

#line default
#line hidden
#nullable disable
            __builder.OpenElement(78, "li");
            __builder.AddContent(79, "loops: {");
            __builder.AddContent(80, 
#nullable restore
#line 58 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                         item.loop

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(81, "}, millis: {");
            __builder.AddContent(82, 
#nullable restore
#line 58 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
                                               ms

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(83, "}\"");
            __builder.CloseElement();
#nullable restore
#line 59 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
        }
    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 63 "C:\Users\Dane\source\repos\BlazorRealTime\BlazorRealTime.Blazor\Pages\Index.razor"
       
    [Inject]
    public ThemeProvider ThemeProvider { get; set; }
    ITheme Theme => ThemeProvider?.Theme;
    static System.Diagnostics.Stopwatch sw = null;

    static int tid() { return System.Threading.Thread.CurrentThread.ManagedThreadId; }
    protected override void OnInitialized()
    {
        var palette = new DefaultPaletteDark();
        ThemeProvider.UpdateTheme(palette, new DefaultSemanticColorsDark(palette), new DefaultSemanticTextColorsDark(palette));

        base.OnInitialized();
    }
    string url = "https://localhost:44393/notificationhub";
    public static string limit = "";
    public static double controlledValue = 0;
    public static double controlledMutation = 0;
    public static string monkeys = "";
    HubConnection _connection = null;
    bool isConnected = false;
    string connectionStatus = "Closed";
    private bool? BoundChecked = false;
    bool? Checked;
    bool? Disabled;

    public static List<TopRequest> notifications = new List<TopRequest>();

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;
        connectionStatus = "Connected :-)";

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected";
            await _connection.StartAsync();
            isConnected = true;
        };

        _connection.On<TopRequest>("notification", m =>
        {
            notifications.Add(m);
            StateHasChanged();
        });
    }

    public static List<string> messages = new List<string>();
    public static int monkeysInput;
    public static string messageInput = "";
    public static bool parallelInput;
    public static int crossoverInput;
    public static int mutationInput;
    public static int alength;
    public static int limitInput;

    private async Task Send()
    {
        notifications.Clear();
        mutationInput = Convert.ToInt32(controlledMutation);
        crossoverInput = Convert.ToInt32(controlledValue);
        monkeysInput = Convert.ToInt32(monkeys);
        limitInput = Convert.ToInt32(limit);
        TargetRequest areq = new TargetRequest { id = 44393, parallel = parallelInput, target = messageInput };
        alength = string.IsNullOrEmpty(messageInput) ? 1 : messageInput.Length;
        TryRequest treq = new TryRequest { id = 44393, parallel = parallelInput, monkeys = monkeysInput, length = alength, crossover = crossoverInput, mutation = mutationInput, limit = limitInput };
        sw = new System.Diagnostics.Stopwatch();
        sw.Start();
        PostTarget(areq);
        PostTry(treq);
        //await Http.PostAsJsonAsync("http://localhost:8091/", areq);
        //await Http.PostAsJsonAsync("https://localhost:44393/api/notifications?treq=", treq);
    }

    public static async void PostTarget(TargetRequest t)
    {
        var client = new HttpClient();

        client.BaseAddress = new Uri("http://localhost:8091/");
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(
            new MediaTypeWithQualityHeaderValue("application/json"));
        var hrm = await client.PostAsJsonAsync("/target", t);
        hrm.EnsureSuccessStatusCode();
        return;
    }

    public static async void PostTry(TryRequest t)
    {
        var client = new HttpClient();

        client.BaseAddress = new Uri("http://localhost:8081/");
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(
            new MediaTypeWithQualityHeaderValue("application/json"));

        //WriteLine($"[{tid()}] ... POST /try send {t}");
        var hrm = await client.PostAsJsonAsync("/try", t);
        hrm.EnsureSuccessStatusCode();
        return;
    }

    public class TargetRequest
    {
        public int id { get; set; }
        public bool parallel { get; set; }
        public string target { get; set; }
        public override string ToString()
        {
            return $"{{{id}, {parallel}, \"{target}\"}}";
        }
    }

    public class TryRequest
    {
        public int id { get; set; }
        public bool parallel { get; set; }
        public int monkeys { get; set; }
        public int length { get; set; }
        public int crossover { get; set; }
        public int mutation { get; set; }
        public int limit { get; set; }
        public override string ToString()
        {
            return $"{{{id}, {parallel}, {monkeys}, {length}, {crossover}, {mutation}, {limit}}}";
        }
    }

    public class TopRequest
    {
        public int id { get; set; }
        public int loop { get; set; }
        public int score { get; set; }
        public string genome { get; set; }
        public override string ToString()
        {
            return $"{{{id}, {loop}, {score}, {genome}}}";
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
