@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Headers
@using BlazorFluentUI

<h1>Welcome to SignalR with Blazor</h1>

<div class="form-group">
    <label>
        Monkeys:
        <input @bind="monkeysInput" />
        <BFUTextField Label="Monkeys" @bind-Value="monkeysInput"/>
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<div class="form-group">
    <label>
        parallel:
        <input @bind="parallelInput" size="50" />
    </label>
</div>

<div class="form-group">
    <label>
        crossover:
        <input @bind="crossoverInput" size="50" />
    </label>
</div>
<div class="form-group">
    <label>
        Mutation:
        <input @bind="mutationInput" size="50" />
    </label>
</div>

<div class="form-group">
    <label>
        Limit:
        <input @bind="limitInput" size="50" />
    </label>
</div>

<button @onclick="Send">Send</button>

<button class="btn btn-success" @onclick="async () => await ConnectToServer()" disabled="@isConnected">Connect</button>
<h3>Connection Status: @connectionStatus</h3>
<div class="row">
    <div class="col-4">
        @foreach (var item in notifications)
        {
            <div class="row">
                <h4>Number of Loops: @item.loop, Genome Score: @item.score, Genome string: @item.genome </h4>
            </div>
        }
    </div>
</div>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    string url = "https://localhost:44393/notificationhub";

    HubConnection _connection = null;
    bool isConnected = false;
    string connectionStatus = "Closed";
    private bool? BoundChecked = false;

    public static List<TopRequest> notifications = new List<TopRequest>();

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;
        connectionStatus = "Connected :-)";

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected";
            await _connection.StartAsync();
            isConnected = true;
        };

        _connection.On<TopRequest>("notification", m =>
        {
            notifications.Add(m);
            StateHasChanged();
        });
    }

    public static List<string> messages = new List<string>();
    public static int monkeysInput;
    public static string messageInput;
    public static bool parallelInput;
    public static int crossoverInput;
    public static int mutationInput;
    public static int alength;
    public static int limitInput;

    private async Task Send()
    {
        notifications.Clear();
        TargetRequest areq = new TargetRequest { id = 44393, parallel = parallelInput, target = messageInput };
        alength = string.IsNullOrEmpty(messageInput) ? 1 : messageInput.Length;
        TryRequest treq = new TryRequest { id = 44393, parallel = parallelInput, monkeys = monkeysInput, length = alength, crossover = crossoverInput, mutation = mutationInput, limit = limitInput };

        PostTarget(areq);
        PostTry(treq);
        //await Http.PostAsJsonAsync("http://localhost:8091/", areq);
        //await Http.PostAsJsonAsync("https://localhost:44393/api/notifications?treq=", treq);
    }

    public static async void PostTarget(TargetRequest t)
    {
        var client = new HttpClient();

        client.BaseAddress = new Uri("http://localhost:8091/");
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(
            new MediaTypeWithQualityHeaderValue("application/json"));
        //client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(""));
        //client.DefaultRequestHeaders.Accept.Add("Access-Control-Allow-Origin", "*");
        //WriteLine($"[{tid()}] ... POST /target send {t}");
        var hrm = await client.PostAsJsonAsync("/target", t);
        hrm.EnsureSuccessStatusCode();
        return;
    }

    public static async void PostTry(TryRequest t)
    {
        var client = new HttpClient();

        client.BaseAddress = new Uri("http://localhost:8081/");
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(
            new MediaTypeWithQualityHeaderValue("application/json"));

        //WriteLine($"[{tid()}] ... POST /try send {t}");
        var hrm = await client.PostAsJsonAsync("/try", t);
        hrm.EnsureSuccessStatusCode();
        return;
    }

    public class TargetRequest
    {
        public int id { get; set; }
        public bool parallel { get; set; }
        public string target { get; set; }
        public override string ToString()
        {
            return $"{{{id}, {parallel}, \"{target}\"}}";
        }
    }

    public class TryRequest
    {
        public int id { get; set; }
        public bool parallel { get; set; }
        public int monkeys { get; set; }
        public int length { get; set; }
        public int crossover { get; set; }
        public int mutation { get; set; }
        public int limit { get; set; }
        public override string ToString()
        {
            return $"{{{id}, {parallel}, {monkeys}, {length}, {crossover}, {mutation}, {limit}}}";
        }
    }

    public class TopRequest
    {
        public int id { get; set; }
        public int loop { get; set; }
        public int score { get; set; }
        public string genome { get; set; }
        public override string ToString()
        {
            return $"{{{id}, {loop}, {score}, {genome}}}";
        }
    }
}